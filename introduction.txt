《c++基础入门》

在振南的指引下，我决定系统整理c++入门的基础知识并录制视频，希望可以引导大家进入强大的c++语言的大门。

本课程的视频演示基于linux系统，你也可以使用任何自己熟悉的环境如window和visual studio。本课程将详细介绍c++的基础语法，包括运算符，语句，流程控制，函数，类，继承，多态和常用的stl等等。我还会简单介绍实际开发中使用的主流开发工具，如项目管理工具blade/bazel/make/cmake，编辑器vim，调试工具gdb和cgdb。总之最终目的是让大家在学习完之后能独立写出基本的c++程序，并且能够调试程序找出bug。

c++是一门强大而应用广泛的编程语言，往往是高性能场景的首先，如广告搜索推荐服务器和游戏引擎等等。但c++又十分庞杂不易精通，所以我希望本课程能引导大家了解并喜欢上c++并不断学习达到更高水平。


大纲：

课程介绍

1. hello, c++
   1.1 vim及vimrc
      1.1.1 基本操作
      1.1.2 配置文件
   1.2 g++
      1.2.1 编译命令
      1.2.2 常用选项
   1.3 一个最简单的程序，打印"hello, c++"
      1.3.1 编译
      1.3.2 运行
      1.3.3 解释
   1.4 注释
   1.5 gdb && cgdb
      1.5.1 启动调试
      1.5.2 查看栈桢
      1.5.3 下一步
      1.5.4 继续
   1.6 实战 : 初试gdb
2. 基本类型及变量定义
   2.1 内置类型
      2.1.1 整型 : 整数、字符、布尔型
      2.1.2 浮点型
      2.1.3 特殊类型void
   2.2 变量
      2.2.2 变量名规则
      2.2.1 c++关键字
      2.2.3 初始化
      2.2.4 声明和定义
      2.2.5 作用域
   2.3 枚举
   2.4 结构体 && 类类型
   2.5 指针和引用
      2.5.1 定义
      2.5.2 空指针 && void*
      2.5.3 二者区别
   2.6 数组和指针
   2.7 const
   2.8 c++11 : auto, 类型推断
      2.8.1 基本用法
      2.8.2 推荐的使用场景
   2.9 编写自己的头文件
3. 表达式
   3.1 算术操作符
   3.2 关系操作符
   3.3 逻辑操作符
   3.4 自增自减操作符
   3.5 箭头操作符
   3.6 条件操作符
   3.7 优先级及括号
   3.8 sizeof
      3.8.1 结构体 && 类的大小
      3.8.2 对齐
4. 语句
   4.1 简单语句
   4.2 if
      4.2.1 单个if
      4.2.2 if else
      4.2.3 规范用法
   4.3 for, while和do while
      4.3.1 基本形式
      4.3.2 经验之谈：不要嵌套太深
   4.4 break和continue
      4.4.1 含义及使用场景
      4.4.2 只作用于最内层循环
   4.5 switch
      4.5.1 定义形式
      4.5.2 break
      4.5.2 default
   4.6 c++11 : for的新写法
5. 函数
   5.1 定义方式
      5.1.1 形参表
      5.1.2 返回值
   5.2 参数
      5.2.1 传值
      5.2.2 引用
      5.2.3 指针
      5.2.4 const参数
      5.2.5 默认参数
      5.2.6 经验之谈：参数设计规范
   5.3 return语句
   5.4 实战：最大公约数
   5.5 局部变量
      5.5.1 自动对象
      5.5.2 静态局部对象
   5.6 函数指针
   5.7 inline函数
   5.8 重载函数
      5.8.1 如何重载
      5.8.2 匹配过程
      5.8.3 经验之谈：在大型程序里尽量不要少用重载
   5.9 实战：使用重载---不同类型数组求和
   5.10 c++11 : lambda
   5.11 c++11 : std::function
   5.12 要学好c++必须了解它的内存
      5.12.1 代码段 && 数据段
      5.12.2 堆和栈
      5.12.3 线程局部存储
   5.13 实战：闭包回调
   5.14 实战：c++11里的单例模式
6. 类
   6.1 定义和声明
      6.1.1 public和private
      6.1.2 成员函数和成员变量
   6.2 构造函数
      6.2.1 定义形式
      6.2.2 初始化列表
      6.2.3 默认构造函数
      6.2.4 编译器自动生成的构造函数
   6.3 析构函数
      6.3.1 定义形式
      6.3.2 编译器总是生成一个
   6.4 复制构造函数
      6.4.1 编译器合成的
      6.4.2 自己定义
   6.5 赋值构造函数
   6.6 经验之谈：为什么要禁止复制构造函数和赋值构造函数？
      6.6.1 深拷贝和浅拷贝
      6.6.2 怎么用在容器中？
      6.6.3 '=default'和'=delete'
   6.7 静态成员
   6.8 this指针
      6.7.1 类成员函数的本质
      6.7.2 const修饰的成员函数
      6.7.3 nullptr调用静态成员函数？
   6.9 友元
   6.10 c++11 : 默认和删除函数
   6.11 c++11 : override和final
   6.12 高级话题 : 类对象的内存部局
   6.13 实战：自定义一个IOBuffer
7. 实战：使用类定义常见数据结构
   7.1 数组
      7.1.1 类定义
      7.1.2 赋值和访问
      7.1.3 动态数组：new和delete
   7.2 链表
      7.2.1 类定义
      7.2.2 常见操作：插入，删除
      7.2.3 与数组区别
   7.3 二叉树
      7.3.1 类定义
      7.3.2 常见操作
   7.4 栈
      7.4.1 类定义
      7.4.2 常用操作
   7.5 跳表
      7.5.1 原理：兼顾插入删除和查找的效率
      7.5.2 类定义
      7.5.3 常用操作
8. 面向对象编程
   8.1 如何定义基类和派生类
      8.1.1 IS-A原则
      8.1.2 如何调用基类构造函数
   8.2 protected成员
   8.3 虚函数和纯虚函数
      8.3.1 定义方式
      8.3.2 虚析构函数
      8.3.3 构造和析构中的虚函数调用
   8.4 友元、静态成员和继承的关系
   8.5 构造和析构的顺序
   8.6 多态
      8.6.1 指针和引用
      8.6.2 多态的好处
   8.7 高级话题 : 继承时类的内存部局及相互转换
   8.8 实战：模拟“反射”，从字符串得到对象
9. 常用容器
   9.1 vector
      9.1.1 常用操作
      9.1.2 内存增长方式
      9.1.3 适合的场景
   9.2 list
      9.2.1 常用操作
      9.2.2 和vector的区别
      9.2.3 如何取长补短?
   9.3 map && unordered_map
      9.3.1 常用操作
      9.3.2 内部实现的区别
   9.4 set
   9.5 实战：实现LRUCache
10. 命名空间
   10.1 为什么需要空间
   10.2 定义
   10.3 嵌套空间
   10.4 如何使用成员
   10.5 经验之谈：尽量不要使用using
11. 模板
   11.1 为什么需要模板
   11.2 函数模板和类模板的定义
   11.3 非类型模板形参
   11.4 实例化
      11.4.1 编译时多态
      11.4.2 类模板的实例化
      11.4.3 函数模板的实例化
   11.5 在模板定义内部指定类型
   11.6 类模板的成员定义
      11.6.1 在类定义的外部定义成员函数
      11.6.2 定义带模板参数的成员变量
   11.7 c++11 : 变长参数的模板
   11.8 实战：使用模板定义栈类型
12. 实战：一步步实现一个小型搜索引擎
   12.1 建立倒排索引
      12.1.1 原始数据：书箱库
      12.1.2 读取文件
      12.1.3 处理字符串
      12.1.4 摘要信息：unordered_map
      12.1.5 倒排结构：unordered_map + vector
   12.2 查找
      12.2.1 命令行式输入界面
      12.2.2 按书名查找
      12.2.3 按分类或年代查找
   12.3 实时添加内容
      12.3.1 加强输入界面：增加导入接口
      12.3.2 索引结构：跳表
      12.3.3 搜索过程：同时搜索vector和跳表
   12.4 实时删除
      12.4.1 加强输入界面：增加删除接口
      12.4.2 记录删除：标记
      12.4.3 调整搜索过程：过滤已删除内容
附录
开发环境及工具
   make/cmake/bazel
   vim
   gdb&&cgdb
